---
- hosts: all
  become: yes
  vars:
   - dependencies:
       - ca-certificates
       - curl
       - gnupg
       - apt-transport-https
   - docker:
       - docker-ce
       - docker-ce-cli
       - containerd
       - runc
       - docker-buildx-plugin
       - docker-compose-plugin
   - kubernetes:
       - kubeadm
       - kubectl
       - kubelet
  tasks:
   - name: Install Dependencies
     ansible.builtin.apt:
       name: "{{ dependencies }}"
       state: present

   - name: Update Cache
     ansible.builtin.apt:
       update_cache: true

   - name: Install Keyring Directory
     ansible.builtin.file:
       path: /etc/apt/keyrings
       state: directory
       mode: '0755'

   - name: Install Docker GPG Key
     ansible.builtin.get_url:
       url: https://download.docker.com/linux/ubuntu/gpg
       dest: /etc/apt/keyrings/docker.asc
       mode: '0644'
       force: true

   - name: Install Docker Repository
     ansible.builtin.apt_repository:
       repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
       filename: /etc/apt/sources.list.d/docker
       state: present
       update_cache: true

   - name: Install Docker Bundle
     ansible.builtin.apt:
       name: "{{ docker }}"
       state: present

  ## Install cri-dockerd as Docker Engine shim for Kubernetes
  # https://github.com/Mirantis/cri-dockerd

   - name: Clone Mirantis/cri-dockerd repo
     ansible.builtin.git:
       repo: https://github.com/Mirantis/cri-dockerd.git
       dest: /cri-dockerd
       single_branch: yes
       version: master

   - name: Download golang build tools
     ansible.builtin.get_url:
       url: https://storage.googleapis.com/golang/getgo/installer_linux
       dest: /tmp/installer_linux
       mode: '0755'

   - name: Install GO
     ansible.builtin.command: /tmp/installer_linux
     args:
       creates: /root/.bash_profile
     environment:
       USER: root

   - name: Source .bash_profile
     ansible.builtin.shell: "source /root/.bash_profile && go version"
     register: go_version_output

   - name: Display GO version
     ansible.builtin.debug:
       var: go_version_output.stdout

   - name: Change to cri-dockerd directory
     ansible.builtin.command: cd /cri-dockerd

   - name: Create a bin directory if it does not exist
     ansible.builtin.file:
       path: /cri-dockerd/bin
       state: directory
       mode: '0755'

   - name: Build cri-dockerd with go build
     ansible.builtin.shell: "go build -o bin/cri-dockerd"
     args:
       creates: /root/cri-dockerd/bin/cri-dockerd

   - name: Create a /usr/local/bin directory if it does not exist
     ansible.builtin.file:
       path: /usr/local/bin
       state: directory
       mode: '0755'

   - name: Install cri-dockerd binary in /usr/local/bin/ directory
     ansible.builtin.copy:
       src: /root/cri-dockerd/bin/cri-dockerd
       dest: /usr/local/bin/cri-dockerd
       owner: root
       group: root
       mode: '0755'

   - name: Copy packaging/systemd/* to /etc/systemd/system directory
     ansible.builtin.copy:
       src: /root/cri-dockerd/packaging/systemd/{{ item }}
       dest: /etc/systemd/system/{{ item }}
       with_items:
         - cri-docker.service
         - cri-docker.socket

   - name: Configure systemd for cri-dockerd
     ansible.builtin.replace:
       path: /etc/systemd/system/cri-docker.service
       regexp: "/usr/bin/cri-dockerd"
       replace: "/usr/local/bin/cri-dockerd"

   - name: Just force systemd to reread configs
     ansible.builtin.systemd:
       daemon_reload: yes

   - name: Start and Enable the cri-dockerd service - cri-docker.service
     ansible.builtin.systemd:
       name: cri-docker.service
       state: started
       enabled: yes

   - name: Start and Enable the cri-dockerd service - cri-docker.socket
     ansible.builtin.systemd:
       name: cri-docker.socket
       state: started
       enabled: yes

    ##

   - name: Add Kubernetes GPG Key
     ansible.builtin.get_url:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
       mode: '0644'
       force: true

   - name: Add Kubernetes Repository
     ansible.builtin.apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
      filename: /etc/apt/sources.list.d/kubernetes
      state: present
      update_cache: true

   - name: Kubernetes Bundle Install
     ansible.builtin.apt:
       name: "{{ kubernetes }}"
       state: present

   - name: Update Cache
     ansible.builtin.apt:
       update_cache: true

##

### Master Node Configurations
- hosts: masters-main
  become: yes
  vars_files:
    - ansible_vars_file.yml
  tasks:
   - name: Check ansible_vars_file.yml file exists.
     ansible.builtin.stat:
       path: /home/ubuntu/ansible_plays/ansible_vars_file.yml
     register: ansible_vars_file

   - name: Start the cluster
     ansible.builtin.shell: sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket /run/containerd/containerd.sock --control-plane-endpoint {{ control_plane_lb }}:6443 --upload-certs >> control_plane.txt
     register: result
     args:
      chdir: $HOME
      creates: control_plane.txt
  
   - name: Sleep for 20 seconds
     ansible.builtin.wait_for:
      timeout: 20

   - name: Create .kube directory
     become: yes
     become_user: ubuntu
     ansible.builtin.file:
       path: $HOME/.kube
       state: directory
       mode: '0755'

   - name: Check admin.conf file exists.
     ansible.builtin.stat:
       path: /etc/kubernetes/admin.conf
     register: kube_conf

   - name: Copy admin.conf to user's kube config
     ansible.builtin.copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu
     when: kube_conf.stat.exists



   - name: Download Flannel
     ansible.builtin.get_url:
       url: https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
       dest: /home/ubuntu/kube-flannel.yml

   - name: Replace Pod CIDR Config
     ansible.builtin.replace:
       path: /home/ubuntu/kube-flannel.yml
       regexp: "10.244.0.0/16"
       replace: "192.168.0.0/16"

   - name: Install Pod network
     become_user: ubuntu
     ansible.builtin.shell: kubectl apply -f kube-flannel.yml
     args:
       chdir: $HOME
       creates: kube-flannel.yml

   - name: get default kubeadm config
     ansible.builtin.shell: kubeadm config print init-defaults > kubeadm_config.yaml
     args:
       chdir: $HOME
       creates: kubeadm-config.yaml

   - name: Create a new certificate key
     ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs --config $HOME/kubeadm_config.yaml
     register: join_certificate_key

   - name: Get join command
     ansible.builtin.shell: kubeadm token create --print-join-command --certificate-key "{{ join_certificate_key.stdout_lines[2] }}"
     register: master_join_command

   - debug:
      var: master_join_command

   - name: Copy join command to local file
     local_action: copy content="{{ master_join_command.stdout_lines[0] }}" dest="./master_join_command"

   - name: Get worker node join command
     ansible.builtin.shell: kubeadm token create --print-join-command
     register: node_join_command

   - name: Copy worker node join command to local file
     local_action: copy content="{{ node_join_command.stdout_lines[0] }}" dest="./node_join_command"
###

#### Configure other master nodes

- hosts: masters-other
  become: yes
  tasks:
   - name: Kubectl Install
     ansible.builtin.apt:
       name: kubectl
       state: present
       force: yes

   - name: Copy the master join command to server location
     ansible.builtin.copy: src=master_join_command dest=/tmp/master_join_command.sh mode=0777

   - name: Add cri socket to kubelet
     ansible.builtin.replace:
      path: /tmp/master_join_command.sh
      regexp: "--token"
      replace: "--cri-socket='/run/containerd/containerd.sock' --token"

   - name: Join the master node to cluster
     ansible.builtin.command: sh /tmp/master_join_command.sh

   - name: Sleep for 20 seconds
     ansible.builtin.wait_for:
      timeout: 20

   - name: Create .kube directory
     become: yes
     become_user: ubuntu
     ansible.builtin.file:
       path: $HOME/.kube
       state: directory
       mode: '0755'

   - name: Check admin.conf file exists.
     ansible.builtin.stat:
       path: /etc/kubernetes/admin.conf
     register: kube_conf

   - name: Copy admin.conf to user's kube config
     ansible.builtin.copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu
     when: kube_conf.stat.exists

####

##### Worker Node Configurations
- hosts: workers
  become: yes
  tasks:
    - name: Copy the join command for worker nodes
      ansible.builtin.copy:
        src: node_join_command
        dest: /tmp/node_join_command.sh
        mode: '0777'

    - name: Add containerd socket
      ansible.builtin.replace:
        path: /tmp/node_join_command.sh
        regexp: "--token"
        replace: "--cri-socket='/run/containerd/containerd.sock' --token"

    - name: Join the worker node to cluster
      ansible.builtin.command: sh /tmp/node_join_command.sh
#####
