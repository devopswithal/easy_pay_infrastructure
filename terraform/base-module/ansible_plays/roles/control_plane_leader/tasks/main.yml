- name: Install etcd-client
  ansible.builtin.apt:
    name: etcd-client
    state: present

- name: Check ansible_vars_file.yml file exists.
  ansible.builtin.stat:
    path: /home/ubuntu/ansible_plays/ansible_vars_file.yml
  register: ansible_vars_file

- name: Add network elb dns name as c-plane-endpoint
  ansible.builtin.replace:
    path: $HOME/kubernetes/kubeconfig.yml
    regexp: "controlPlaneEndpoint:"
    replace: "controlPlaneEndpoint: {{ control_plane_lb }}:6443"

## sudo kubeadm init --config=$HOME/kubernetes/kubeconfig.yml --upload-certs --v=10>> control_plane.txt

- name: Initialize cluster with kubeadm
  ansible.builtin.shell:
    cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///run/containerd/containerd.sock --control-plane-endpoint {{ control_plane_lb }}:6443  --upload-certs --v=5>> control_plane.txt
  register: result
  args:
    chdir: $HOME
    creates: control_plane.txt

- name: Create .kube directory
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: '0755'

- name: Copy admin.conf to user's kube config
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    remote_src: yes

- name: Move kube-controller-manager manifest file out of static pod path
  ansible.builtin.command:
    cmd: mv /etc/kubernetes/manifests/kube-controller-manager.yaml /tmp/

- name: Add cloud-provider flag to api-server config
  ansible.builtin.lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: "    - kube-apiserver"
    line: "    - --cloud-provider=external"

- name: Add cloud-provider flag to controller-manager config
  ansible.builtin.lineinfile:
    path: /tmp/kube-controller-manager.yaml
    insertafter: "    - kube-controller-manager"
    line: "    - --cloud-provider=external"

- name: Add kubelet extra args
  ansible.builtin.lineinfile:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    insertafter: \[Service\]
    line: Environment="KUBELET_EXTRA_ARGS=--resolv-conf=/run/systemd/resolve/resolv.conf --cloud-provider=external"

- name: Restart kubelet
  ansible.builtin.systemd:
    daemon_reload: true
    name: kubelet
    state: restarted

- name: Download Flannel
  ansible.builtin.get_url:
    url: https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    dest: $HOME/kube-flannel.yml

- name: Replace c-plane cni interface name
  ansible.builtin.replace:
    path: $HOME/kube-flannel.yml
    regexp: "cbr0"
    replace: "cni0"

- name: Install Pod network
  ansible.builtin.shell:
    cmd: kubectl apply -f $HOME/kube-flannel.yml

- name: Install AWS Cloud-Controller-Manager
  ansible.builtin.shell:
    cmd: kubectl apply -f $HOME/kubernetes/aws-controller-manager.yml

- name: Move kube-controller-manager manifest file back to static pod path
  ansible.builtin.command:
    cmd: mv /tmp/kube-controller-manager.yaml /etc/kubernetes/manifests/

- name: Restart kubelet
  ansible.builtin.systemd:
    name: kubelet
    state: restarted

- name: Sleep for 20 seconds
  ansible.builtin.wait_for:
    timeout: 20

- name: get default kubeadm config
  ansible.builtin.shell:
    cmd: kubeadm config print init-defaults > kubeadm_config.yaml
  args:
    chdir: $HOME
    creates: kubeadm-config.yaml

- name: Create a new certificate key
  ansible.builtin.shell:
    cmd: kubeadm init phase upload-certs --upload-certs --config $HOME/kubeadm_config.yaml
  register: join_certificate_key

- name: Get join command
  ansible.builtin.shell:
    cmd: kubeadm token create --print-join-command --certificate-key "{{ join_certificate_key.stdout_lines[2] }}"
  register: cp_join_command

- debug:
    var: cp_join_command

- name: Copy join command to local file
  local_action:
    module: ansible.builtin.copy
    content: "{{ cp_join_command.stdout_lines[0] }}"
    dest: ./cp_join_command

- name: Get worker node join command
  ansible.builtin.shell:
    cmd: kubeadm token create --print-join-command
  register: node_join_command

- debug:
    var: node_join_command

- name: Copy worker node join command to local file
  local_action:
    module: ansible.builtin.copy
    content: "{{ node_join_command.stdout_lines[0] }}"
    dest: ./node_join_command







